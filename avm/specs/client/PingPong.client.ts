/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PingPong","structs":{},"methods":[{"name":"create","args":[{"type":"uint64","name":"wormhole_core"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_emitter_lsig","args":[{"type":"address","name":"emitter_lsig"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"ping","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"receive_message","args":[{"type":"appl","name":"verify_vaa"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"wormhole_core":{"keyType":"AVMString","valueType":"AVMUint64","key":"d29ybWhvbGVfY29yZQ=="},"emitter_lsig":{"keyType":"AVMString","valueType":"address","key":"ZW1pdHRlcl9sc2ln"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[312],"errorMessage":"Address length is 32 bytes"},{"pc":[118],"errorMessage":"Incorrect app on completion"},{"pc":[135],"errorMessage":"Incorrect method"},{"pc":[91,228,241,255],"errorMessage":"OnCompletion is not NoOp"},{"pc":[211],"errorMessage":"Unknown payload"},{"pc":[113],"errorMessage":"Unknown wormhole core"},{"pc":[278],"errorMessage":"Wormhole core address unknown"},{"pc":[296],"errorMessage":"Wormhole message fee is unknown"},{"pc":[259],"errorMessage":"can only call when creating"},{"pc":[94,231,244],"errorMessage":"can only call when not creating"},{"pc":[306],"errorMessage":"check self.emitter_lsig exists"},{"pc":[111,275,282,300],"errorMessage":"check self.wormhole_core exists"},{"pc":[104],"errorMessage":"transaction type is appl"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEGBSYEDXdvcm1ob2xlX2NvcmUEcGluZwRwb25nDGVtaXR0ZXJfbHNpZzEbQQAjggQEJA0vZwR3OWx+BBiLj7QEb9bIdDYaAI4EAKYAmACLAAIiQzEZFEQxGEQxFiMJSTgQJBJESTgYIihlRBJESTgZFERJIsIagAl2ZXJpZnlWQUESRCPCGkklVYFCCyMIJQhLARVLAksCSwJSAgJPAoEICEsDSwFZTIECCEsESwGBIFhMgSkITwVMTwVSTwOwTwIWsEywKSpPAo4CAAcAAQApiAA1I0MqiAAvQv/3MRkURDEYRCmIACEjQzEZFEQxGEQrNhoBZyNDMRkURDEYFEQ2GgEXKExnI0OKAQAiKGVEcghEIihlRIAKTWVzc2FnZUZlZWVEIihlRCIWIitlREkVgSASRLFPA7IITwOyByOyECKyAbayHIAOcHVibGlzaE1lc3NhZ2WyGov/shqyGrIYJLIQIrIBs4v/sIk=","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":2}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PingPong contract
 */
export type PingPongArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(uint64)void': {
      wormholeCore: bigint | number
    }
    'set_emitter_lsig(address)void': {
      emitterLsig: string
    }
    'ping()void': Record<string, never>
    'receive_message(appl)void': {
      verifyVaa: AppMethodCallTransactionArgument
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(uint64)void': [wormholeCore: bigint | number]
    'set_emitter_lsig(address)void': [emitterLsig: string]
    'ping()void': []
    'receive_message(appl)void': [verifyVaa: AppMethodCallTransactionArgument]
  }
}

/**
 * The return type for each method
 */
export type PingPongReturns = {
  'create(uint64)void': void
  'set_emitter_lsig(address)void': void
  'ping()void': void
  'receive_message(appl)void': void
}

/**
 * Defines the types of available calls and state of the PingPong smart contract.
 */
export type PingPongTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(uint64)void' | 'create', {
      argsObj: PingPongArgs['obj']['create(uint64)void']
      argsTuple: PingPongArgs['tuple']['create(uint64)void']
      returns: PingPongReturns['create(uint64)void']
    }>
    & Record<'set_emitter_lsig(address)void' | 'set_emitter_lsig', {
      argsObj: PingPongArgs['obj']['set_emitter_lsig(address)void']
      argsTuple: PingPongArgs['tuple']['set_emitter_lsig(address)void']
      returns: PingPongReturns['set_emitter_lsig(address)void']
    }>
    & Record<'ping()void' | 'ping', {
      argsObj: PingPongArgs['obj']['ping()void']
      argsTuple: PingPongArgs['tuple']['ping()void']
      returns: PingPongReturns['ping()void']
    }>
    & Record<'receive_message(appl)void' | 'receive_message', {
      argsObj: PingPongArgs['obj']['receive_message(appl)void']
      argsTuple: PingPongArgs['tuple']['receive_message(appl)void']
      returns: PingPongReturns['receive_message(appl)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        wormholeCore: bigint
        emitterLsig: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PingPongSignatures = keyof PingPongTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PingPongNonVoidMethodSignatures = keyof PingPongTypes['methods'] extends infer T ? T extends keyof PingPongTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PingPong smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PingPongSignatures> = PingPongTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PingPong smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PingPongSignatures> = PingPongTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PingPongTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PingPongCreateCallParams =
  | Expand<CallParams<PingPongArgs['obj']['create(uint64)void'] | PingPongArgs['tuple']['create(uint64)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<PingPongArgs['obj']['create(uint64)void'] | PingPongArgs['tuple']['create(uint64)void']> & {method: 'create(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PingPongDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PingPongCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PingPong smart contract
 */
export abstract class PingPongParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends PingPongCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(uint64)void':
            return PingPongParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the PingPong smart contract using the create(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<PingPongArgs['obj']['create(uint64)void'] | PingPongArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.wormholeCore],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the set_emitter_lsig(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setEmitterLsig(params: CallParams<PingPongArgs['obj']['set_emitter_lsig(address)void'] | PingPongArgs['tuple']['set_emitter_lsig(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_emitter_lsig(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.emitterLsig],
    }
  }
  /**
   * Constructs a no op call for the ping()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static ping(params: CallParams<PingPongArgs['obj']['ping()void'] | PingPongArgs['tuple']['ping()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'ping()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the receive_message(appl)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static receiveMessage(params: CallParams<PingPongArgs['obj']['receive_message(appl)void'] | PingPongArgs['tuple']['receive_message(appl)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'receive_message(appl)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.verifyVaa],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PingPong smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PingPongFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PingPongFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PingPongClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PingPongClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PingPong smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PingPongDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? PingPongParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (PingPongCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new PingPongClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PingPong smart contract using the create(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<PingPongArgs['obj']['create(uint64)void'] | PingPongArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(PingPongParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PingPong smart contract using the create(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<PingPongArgs['obj']['create(uint64)void'] | PingPongArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(PingPongParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PingPong smart contract using an ABI method call using the create(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<PingPongArgs['obj']['create(uint64)void'] | PingPongArgs['tuple']['create(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(PingPongParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | PingPongReturns['create(uint64)void']) }, appClient: new PingPongClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PingPong smart contract
 */
export class PingPongClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PingPongClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PingPong app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PingPongClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PingPongNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PingPongClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PingPongClient> {
    return new PingPongClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PingPongClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PingPongClient> {
    return new PingPongClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PingPong smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PingPong smart contract using the `set_emitter_lsig(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setEmitterLsig: (params: CallParams<PingPongArgs['obj']['set_emitter_lsig(address)void'] | PingPongArgs['tuple']['set_emitter_lsig(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PingPongParamsFactory.setEmitterLsig(params))
    },

    /**
     * Makes a call to the PingPong smart contract using the `ping()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    ping: (params: CallParams<PingPongArgs['obj']['ping()void'] | PingPongArgs['tuple']['ping()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(PingPongParamsFactory.ping(params))
    },

    /**
     * Makes a call to the PingPong smart contract using the `receive_message(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    receiveMessage: (params: CallParams<PingPongArgs['obj']['receive_message(appl)void'] | PingPongArgs['tuple']['receive_message(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PingPongParamsFactory.receiveMessage(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PingPong smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PingPong smart contract using the `set_emitter_lsig(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setEmitterLsig: (params: CallParams<PingPongArgs['obj']['set_emitter_lsig(address)void'] | PingPongArgs['tuple']['set_emitter_lsig(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PingPongParamsFactory.setEmitterLsig(params))
    },

    /**
     * Makes a call to the PingPong smart contract using the `ping()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    ping: (params: CallParams<PingPongArgs['obj']['ping()void'] | PingPongArgs['tuple']['ping()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(PingPongParamsFactory.ping(params))
    },

    /**
     * Makes a call to the PingPong smart contract using the `receive_message(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    receiveMessage: (params: CallParams<PingPongArgs['obj']['receive_message(appl)void'] | PingPongArgs['tuple']['receive_message(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PingPongParamsFactory.receiveMessage(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PingPong smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PingPong smart contract using the `set_emitter_lsig(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setEmitterLsig: async (params: CallParams<PingPongArgs['obj']['set_emitter_lsig(address)void'] | PingPongArgs['tuple']['set_emitter_lsig(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PingPongParamsFactory.setEmitterLsig(params))
      return {...result, return: result.return as unknown as (undefined | PingPongReturns['set_emitter_lsig(address)void'])}
    },

    /**
     * Makes a call to the PingPong smart contract using the `ping()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    ping: async (params: CallParams<PingPongArgs['obj']['ping()void'] | PingPongArgs['tuple']['ping()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(PingPongParamsFactory.ping(params))
      return {...result, return: result.return as unknown as (undefined | PingPongReturns['ping()void'])}
    },

    /**
     * Makes a call to the PingPong smart contract using the `receive_message(appl)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    receiveMessage: async (params: CallParams<PingPongArgs['obj']['receive_message(appl)void'] | PingPongArgs['tuple']['receive_message(appl)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PingPongParamsFactory.receiveMessage(params))
      return {...result, return: result.return as unknown as (undefined | PingPongReturns['receive_message(appl)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PingPongClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PingPong app
   */
  state = {
    /**
     * Methods to access global state for the current PingPong app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          wormholeCore: result.wormhole_core,
          emitterLsig: result.emitter_lsig,
        }
      },
      /**
       * Get the current value of the wormhole_core key in global state
       */
      wormholeCore: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("wormhole_core")) as bigint | undefined },
      /**
       * Get the current value of the emitter_lsig key in global state
       */
      emitterLsig: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("emitter_lsig")) as string | undefined },
    },
  }

  public newGroup(): PingPongComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a set_emitter_lsig(address)void method call against the PingPong contract
       */
      setEmitterLsig(params: CallParams<PingPongArgs['obj']['set_emitter_lsig(address)void'] | PingPongArgs['tuple']['set_emitter_lsig(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setEmitterLsig(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a ping()void method call against the PingPong contract
       */
      ping(params: CallParams<PingPongArgs['obj']['ping()void'] | PingPongArgs['tuple']['ping()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.ping(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a receive_message(appl)void method call against the PingPong contract
       */
      receiveMessage(params: CallParams<PingPongArgs['obj']['receive_message(appl)void'] | PingPongArgs['tuple']['receive_message(appl)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.receiveMessage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the PingPong contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PingPongComposer
  }
}
export type PingPongComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the set_emitter_lsig(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setEmitterLsig(params?: CallParams<PingPongArgs['obj']['set_emitter_lsig(address)void'] | PingPongArgs['tuple']['set_emitter_lsig(address)void']>): PingPongComposer<[...TReturns, PingPongReturns['set_emitter_lsig(address)void'] | undefined]>

  /**
   * Calls the ping()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ping(params?: CallParams<PingPongArgs['obj']['ping()void'] | PingPongArgs['tuple']['ping()void']>): PingPongComposer<[...TReturns, PingPongReturns['ping()void'] | undefined]>

  /**
   * Calls the receive_message(appl)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receiveMessage(params?: CallParams<PingPongArgs['obj']['receive_message(appl)void'] | PingPongArgs['tuple']['receive_message(appl)void']>): PingPongComposer<[...TReturns, PingPongReturns['receive_message(appl)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PingPong smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PingPongComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PingPongComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PingPongComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PingPongComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PingPongComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PingPongComposerResults<TReturns>>
}
export type PingPongComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

